name: Release

on:
  push:
    tags:
    - v[0-9]+.[0-9]+.[0-9]+*

jobs:
  dist:
    name: Publish to Github Releases
    outputs:
      rc: ${{ steps.check-tag.outputs.rc }}

    strategy:
      matrix:
        include:
        - target: aarch64-unknown-linux-musl
          os: ubuntu-latest
          code-target: linux-arm64
        - target: aarch64-apple-darwin
          os: macos-latest
          code-target: darwin-arm64
        # - target: aarch64-pc-windows-msvc  #  Blocked on https://github.com/briansmith/ring/issues/1488
        #   os: windows-latest
        #   code-target: win32-arm64
        - target: x86_64-apple-darwin
          os: macos-latest
          code-target: darwin-x64
        - target: x86_64-pc-windows-msvc
          os: windows-latest
          code-target: win32-x64
        - target: x86_64-unknown-linux-musl
          os: ubuntu-latest
          code-target: linux-x64
        - target: armv7-unknown-linux-musleabihf
          os: ubuntu-latest
          code-target: linux-armhf
    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@v3

    - name: Check Tag
      id: check-tag
      shell: bash
      run: |
        tag=${GITHUB_REF##*/}
        echo "::set-output name=version::$tag"
        if [[ "$tag" =~ [0-9]+.[0-9]+.[0-9]+$ ]]; then
          echo "::set-output name=rc::false"
        else
          echo "::set-output name=rc::true"
        fi

    - uses: actions/setup-node@v3
      with:
        node-version: '14'
        cache: 'yarn'

    - run: yarn install --frozen-lockfile
    
    - name: Package Extension
      id: package
      shell: bash
      run: |
        version=$(cat JSONA_VERSION)
        args=""
        if [[ "${{ steps.check-tag.outputs.rc }}" == "true" ]]; then
          args="--pre-release"
        fi
        mkdir -p server dist
        output=dist/jsona-${{ matrix.code-target }}.vsix

        if [[ "$RUNNER_OS" == "Windows" ]]; then
          jsona_file=jsona-$version-${{ matrix.target }}.zip
          curl -L -o $jsona_file https://github.com/jsona/jsona/releases/download/$version/$jsona_file
          7z -oserver x $jsona_file
          npx vsce package -o $output --target ${{ matrix.code-target }} $args
        else
          jsona_file=jsona-$version-${{ matrix.target }}.tar.gz
          wget https://github.com/jsona/jsona/releases/download/$version/$jsona_file
          tar -C server -xf $jsona_file
          npx vsce package -o $output --target ${{ matrix.code-target }} $args
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            rm -rf server
            npx vsce package -o dist/jsona-no-server.vsix $args
          fi
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: dist-${{ matrix.target }}
        path: ./dist

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: ["dist"]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '14'
        cache: 'yarn'
    - uses: actions/download-artifact@v1
      with:
        name: dist-aarch64-unknown-linux-musl
        path: dist
    - uses: actions/download-artifact@v1
      with:
        name: dist-aarch64-apple-darwin
        path: dist
    # - uses: actions/download-artifact@v1
    #   with:
    #     name: dist-aarch64-pc-windows-msvc
    #     path: dist
    - uses: actions/download-artifact@v1
      with:
        name: dist-x86_64-apple-darwin
        path: dist
    - uses: actions/download-artifact@v1
      with:
        name: dist-x86_64-pc-windows-msvc 
        path: dist
    - uses: actions/download-artifact@v1
      with:
        name: dist-x86_64-unknown-linux-musl
        path: dist
    - uses: actions/download-artifact@v1
      with:
        name: dist-armv7-unknown-linux-musleabihf
        path: dist

    - run: ls -l ./dist

    - name: Publish Release
      uses: softprops/action-gh-release@v0.1.5
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      with:
        draft: false
        files: dist/*
        prerelease: ${{ steps.check-tag.outputs.rc == 'true' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish Extension
      shell: bash
      run: |
        args=""
        if [[ "${{ steps.check-tag.outputs.rc }}" == "true" ]]; then
          args="--pre-release"
        fi
        rm -rf dist/jsona-no-server.vsix
        yarn install --frozen-lockfile
        npx vsce publish --pat ${{ secrets.MARKETPLACE_TOKEN }} --packagePath dist/jsona-*.vsix $args