#!/usr/bin/env bash

set -e

PKGS=( \
    core \
    util-types \
    lsp \
)

# @cmd Build js
# @flag --debug
# @arg name[core|util-types|lsp|all]
build() {
    if [[ -n $argc_debug ]]; then
        export WASM_DEBUG=true
    fi
    if [[ -z "$1" ]] || [[ "$1" == "all" ]]; then
        for name in ${PKGS[@]}; do
            yarn --cwd js workspace @jsona/$name build
            ls -alh js/$name/dist
        done
    else
        yarn --cwd js workspace @jsona/$1 build
        ls -alh js/$1/dist
    fi
}

# @cmd Publish to npm
publish() {
    for name in ${PKGS[@]}; do
        online_ver=$(npm show @jsona/$name version)
        pkg_ver=$(node -p "require('./js/"$name"/package.json').version")
        if [[ "$online_ver" != "$pkg_ver" ]]; then
            read -p "Upgrade $name from $online_ver to $pkg_ver (y/n)? " choice
            if [[ "$choice" == y ]]; then
                (cd js/$name && npm publish)
            fi
        else
            echo @jsona/$name:$pkg_ver is up to date
        fi
    done
}

# @cmd Patch jsona* crates path to use loca
patch-path() {
    sed -i \
        -e 's|jsona = { git = "https://github.com/jsona/jsona.git" }|jsona = { path = "../../../jsona/crates/jsona" }|' \
        -e 's|jsona-util = { git = "https://github.com/jsona/jsona.git" }|jsona-util = { path = "../../../jsona/crates/jsona-util" }|' \
        -e 's|jsona-cli = { git = "https://github.com/jsona/jsona.git", optional = true }|jsona-cli = { path = "../../../jsona/crates/jsona-cli", optional = true }|' \
        -e 's|jsona-lsp = { git = "https://github.com/jsona/jsona.git", optional = true }|jsona-lsp = { path = "../../../jsona/crates/jsona-lsp", optional = true }|' \
        crates/jsona-wasm-cli/Cargo.toml

    sed -i \
        -e 's|jsona = { git = "https://github.com/jsona/jsona.git" }|jsona = { path = "../../../jsona/crates/jsona" }|' \
        crates/jsona-wasm-core/Cargo.toml
}

eval "$(argc --argc-eval $0 "$@")"
