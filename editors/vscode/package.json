{
  "name": "vscode-jsona",
  "displayName": "JSONA syntax",
  "description": "Adds syntax highlighting of JSONA files",
  "version": "0.2.0",
  "publisher": "sigoden",
  "license": "MIT",
  "engines": {
    "vscode": "^1.44.0"
  },
  "icon": "icon.png",
  "homepage": "https://github.com/sigoden/vscode-jsona/blob/master/README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/sigoden/vscode-jsona"
  },
  "keywords": [
    "jsona",
    "syntax",
    "highlight"
  ],
  "categories": [
    "Programming Languages",
    "Linters",
    "Formatters",
    "Other"
  ],
  "activationEvents": [
    "onLanguage:jsona"
  ],
  "contributes": {
    "configuration": {
      "title": "JSONA",
      "properties": {
        "jsona.executable.path": {
          "type": [
            "string",
            "null"
          ],
          "scope": "resource",
          "description": "Path to the jsona executable.",
          "default": null
        },
        "jsona.executable.environment": {
          "type": [
            "object",
            "null"
          ],
          "scope": "resource",
          "description": "Environment variables for the jsona executable.",
          "properties": {
            "type": "string"
          },
          "default": null
        },
        "jsona.executable.extraArgs": {
          "type": [
            "array",
            "null"
          ],
          "scope": "resource",
          "description": "Additional arguments for the jsona executable.",
          "items": {
            "type": "string"
          },
          "default": null
        },
        "jsona.configFile.path": {
          "description": "An absolute, or workspace relative path to the Taplo configuration file.",
          "type": "string",
          "scope": "resource"
        },
        "jsona.configFile.enabled": {
          "description": "Whether to enable the usage of a Taplo configuration file.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "jsona.schema.enabled": {
          "description": "Enable completion and validation based on JSON schemas.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "jsona.schema.links": {
          "description": "Whether to show clickable links for keys in the editor.",
          "type": "boolean",
          "scope": "resource",
          "default": false
        },
        "jsona.schema.associations": {
          "description": "Document and schema associations.",
          "markdownDescription": "Additional document and schema associations. \n\n The key must be a regular expression, this pattern is used to associate schemas with absolute document URIs. Overlapping patterns result in undefined behaviour and either matching schema can be used. \n\n The value must be an absolute URI to the JSON schema, for supported values and more information [read here](https://taplo.tamasfe.dev/configuration#visual-studio-code).",
          "type": "object",
          "scope": "resource",
          "default": {}
        },
        "jsona.schema.cache.memoryExpiration": {
          "description": "The amount of seconds after which schemas will be invalidated from memory.",
          "markdownDescription": "The amount of seconds after which schemas will be invalidated from memory. \n**NOTE**: setting too low values will cause performance issues and validation of some schemas will fail.",
          "type": "integer",
          "scope": "resource",
          "minimum": 0,
          "default": 60
        },
        "jsona.schema.cache.diskExpiration": {
          "description": "The amount of seconds after which cached catalogs and schemas expire and will be attempted to be fetched again.",
          "type": "integer",
          "scope": "resource",
          "minimum": 0,
          "default": 600
        },
        "jsona.formatter.indentString": {
          "scope": "resource",
          "type": "string",
          "default": null,
          "description": "Indentation to use, should be tabs or spaces but technically could be anything."
        },
        "jsona.formatter.trailingNewline": {
          "scope": "resource",
          "type": "boolean",
          "default": null,
          "description": "Add trailing newline to the source."
        },
        "jsona.formatter.trailingComma": {
          "scope": "resource",
          "type": "boolean",
          "default": null,
          "description": "Put trailing commas for multiline arrays and objects."
        }
      }
    },
    "languages": [
      {
        "id": "jsona",
        "aliases": [
          "JSONA"
        ],
        "extensions": [
          ".jsona"
        ],
        "filenames": [
          ".jsona"
        ],
        "configuration": "./jsona.configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "jsona",
        "scopeName": "source.jsona",
        "path": "./syntaxes/jsona.json"
      }
    ]
  },
  "main": "./dist/extension.js",
  "scripts": {
    "vscode:prepublish": "yarn build",
    "build": "esbuild ./src/extension.ts --bundle --outfile=dist/extension.js --external:vscode --format=cjs --platform=node"
  },
  "dependencies": {
    "esbuild": "^0.14.49",
    "typescript": "^4.7.4",
    "vscode-languageclient": "^8.0.2",
    "which": "^2.0.2"
  },
  "devDependencies": {
    "@types/vscode": "^1.69.0"
  }
}
